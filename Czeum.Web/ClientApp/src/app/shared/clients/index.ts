/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.5.0 (NJsonSchema v10.1.7.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
  providedIn: 'root'
})
export class AccountsClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
  }

  register(model: RegisterModel): Observable<void> {
    let url_ = this.baseUrl + "/api/accounts/register";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(model);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processRegister(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processRegister(<any>response_);
        } catch (e) {
          return <Observable<void>><any>_observableThrow(e);
        }
      } else
        return <Observable<void>><any>_observableThrow(response_);
    }));
  }

  protected processRegister(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("A server side error occurred.", status, _responseText, _headers);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<void>(<any>null);
  }

  changePassword(model: ChangePasswordModel): Observable<void> {
    let url_ = this.baseUrl + "/api/accounts/change-password";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(model);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processChangePassword(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processChangePassword(<any>response_);
        } catch (e) {
          return <Observable<void>><any>_observableThrow(e);
        }
      } else
        return <Observable<void>><any>_observableThrow(response_);
    }));
  }

  protected processChangePassword(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("A server side error occurred.", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<void>(<any>null);
  }

  confirmEmail(username: string | null | undefined, token: string | null | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/accounts/confirm-email?";
    if (username !== undefined)
      url_ += "username=" + encodeURIComponent("" + username) + "&";
    if (token !== undefined)
      url_ += "token=" + encodeURIComponent("" + token) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processConfirmEmail(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processConfirmEmail(<any>response_);
        } catch (e) {
          return <Observable<void>><any>_observableThrow(e);
        }
      } else
        return <Observable<void>><any>_observableThrow(response_);
    }));
  }

  protected processConfirmEmail(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("A server side error occurred.", status, _responseText, _headers);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<void>(<any>null);
  }

  resetPasswordGet(username: string | null | undefined, email: string | null | undefined): Observable<FileResponse | null> {
    let url_ = this.baseUrl + "/api/accounts/reset-password?";
    if (username !== undefined)
      url_ += "username=" + encodeURIComponent("" + username) + "&";
    if (email !== undefined)
      url_ += "email=" + encodeURIComponent("" + email) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/octet-stream"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processResetPasswordGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processResetPasswordGet(<any>response_);
        } catch (e) {
          return <Observable<FileResponse | null>><any>_observableThrow(e);
        }
      } else
        return <Observable<FileResponse | null>><any>_observableThrow(response_);
    }));
  }

  protected processResetPasswordGet(response: HttpResponseBase): Observable<FileResponse | null> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
      const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<FileResponse | null>(<any>null);
  }

  resetPasswordPost(model: PasswordResetModel): Observable<FileResponse | null> {
    let url_ = this.baseUrl + "/api/accounts/reset-password";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(model);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/octet-stream"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processResetPasswordPost(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processResetPasswordPost(<any>response_);
        } catch (e) {
          return <Observable<FileResponse | null>><any>_observableThrow(e);
        }
      } else
        return <Observable<FileResponse | null>><any>_observableThrow(response_);
    }));
  }

  protected processResetPasswordPost(response: HttpResponseBase): Observable<FileResponse | null> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
      const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<FileResponse | null>(<any>null);
  }

  resendConfirmEmail(email: string | null | undefined): Observable<FileResponse | null> {
    let url_ = this.baseUrl + "/api/accounts/resend-confirm-email?";
    if (email !== undefined)
      url_ += "email=" + encodeURIComponent("" + email) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/octet-stream"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processResendConfirmEmail(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processResendConfirmEmail(<any>response_);
        } catch (e) {
          return <Observable<FileResponse | null>><any>_observableThrow(e);
        }
      } else
        return <Observable<FileResponse | null>><any>_observableThrow(response_);
    }));
  }

  protected processResendConfirmEmail(response: HttpResponseBase): Observable<FileResponse | null> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
      const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<FileResponse | null>(<any>null);
  }

  me(): Observable<UserInfo> {
    let url_ = this.baseUrl + "/api/accounts/me";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processMe(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processMe(<any>response_);
        } catch (e) {
          return <Observable<UserInfo>><any>_observableThrow(e);
        }
      } else
        return <Observable<UserInfo>><any>_observableThrow(response_);
    }));
  }

  protected processMe(response: HttpResponseBase): Observable<UserInfo> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UserInfo.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<UserInfo>(<any>null);
  }

  usernameAvailable(username: string | null | undefined): Observable<boolean> {
    let url_ = this.baseUrl + "/api/accounts/username-available?";
    if (username !== undefined)
      url_ += "username=" + encodeURIComponent("" + username) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processUsernameAvailable(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUsernameAvailable(<any>response_);
        } catch (e) {
          return <Observable<boolean>><any>_observableThrow(e);
        }
      } else
        return <Observable<boolean>><any>_observableThrow(response_);
    }));
  }

  protected processUsernameAvailable(response: HttpResponseBase): Observable<boolean> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : <any>null;
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<boolean>(<any>null);
  }

  emailAvailable(email: string | null | undefined): Observable<boolean> {
    let url_ = this.baseUrl + "/api/accounts/email-available?";
    if (email !== undefined)
      url_ += "email=" + encodeURIComponent("" + email) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processEmailAvailable(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processEmailAvailable(<any>response_);
        } catch (e) {
          return <Observable<boolean>><any>_observableThrow(e);
        }
      } else
        return <Observable<boolean>><any>_observableThrow(response_);
    }));
  }

  protected processEmailAvailable(response: HttpResponseBase): Observable<boolean> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : <any>null;
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<boolean>(<any>null);
  }

  accounts(username: string | null | undefined): Observable<UserDto[]> {
    let url_ = this.baseUrl + "/api/accounts?";
    if (username !== undefined)
      url_ += "username=" + encodeURIComponent("" + username) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processAccounts(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAccounts(<any>response_);
        } catch (e) {
          return <Observable<UserDto[]>><any>_observableThrow(e);
        }
      } else
        return <Observable<UserDto[]>><any>_observableThrow(response_);
    }));
  }

  protected processAccounts(response: HttpResponseBase): Observable<UserDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(UserDto.fromJS(item));
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<UserDto[]>(<any>null);
  }
}

@Injectable({
  providedIn: 'root'
})
export class AchivetmentsClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
  }

  achivements(): Observable<AchivementDto[]> {
    let url_ = this.baseUrl + "/api/achivements";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processAchivements(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAchivements(<any>response_);
        } catch (e) {
          return <Observable<AchivementDto[]>><any>_observableThrow(e);
        }
      } else
        return <Observable<AchivementDto[]>><any>_observableThrow(response_);
    }));
  }

  protected processAchivements(response: HttpResponseBase): Observable<AchivementDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(AchivementDto.fromJS(item));
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<AchivementDto[]>(<any>null);
  }

  star(achivementId: string | undefined, id: string): Observable<AchivementDto> {
    let url_ = this.baseUrl + "/api/achivements/{id}/star?";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    if (achivementId === null)
      throw new Error("The parameter 'achivementId' cannot be null.");
    else if (achivementId !== undefined)
      url_ += "achivementId=" + encodeURIComponent("" + achivementId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processStar(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processStar(<any>response_);
        } catch (e) {
          return <Observable<AchivementDto>><any>_observableThrow(e);
        }
      } else
        return <Observable<AchivementDto>><any>_observableThrow(response_);
    }));
  }

  protected processStar(response: HttpResponseBase): Observable<AchivementDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AchivementDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<AchivementDto>(<any>null);
  }

  unstar(achivementId: string | undefined, id: string): Observable<AchivementDto> {
    let url_ = this.baseUrl + "/api/achivements/{id}/unstar?";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    if (achivementId === null)
      throw new Error("The parameter 'achivementId' cannot be null.");
    else if (achivementId !== undefined)
      url_ += "achivementId=" + encodeURIComponent("" + achivementId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processUnstar(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUnstar(<any>response_);
        } catch (e) {
          return <Observable<AchivementDto>><any>_observableThrow(e);
        }
      } else
        return <Observable<AchivementDto>><any>_observableThrow(response_);
    }));
  }

  protected processUnstar(response: HttpResponseBase): Observable<AchivementDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AchivementDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<AchivementDto>(<any>null);
  }
}

@Injectable({
  providedIn: 'root'
})
export class LobbiesClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
  }

  lobbiesGet(): Observable<LobbyDataWrapper[]> {
    let url_ = this.baseUrl + "/api/lobbies";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processLobbiesGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processLobbiesGet(<any>response_);
        } catch (e) {
          return <Observable<LobbyDataWrapper[]>><any>_observableThrow(e);
        }
      } else
        return <Observable<LobbyDataWrapper[]>><any>_observableThrow(response_);
    }));
  }

  protected processLobbiesGet(response: HttpResponseBase): Observable<LobbyDataWrapper[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(LobbyDataWrapper.fromJS(item));
        }
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<LobbyDataWrapper[]>(<any>null);
  }

  lobbiesPost(dto: CreateLobbyDto): Observable<LobbyDataWrapper> {
    let url_ = this.baseUrl + "/api/lobbies";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(dto);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processLobbiesPost(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processLobbiesPost(<any>response_);
        } catch (e) {
          return <Observable<LobbyDataWrapper>><any>_observableThrow(e);
        }
      } else
        return <Observable<LobbyDataWrapper>><any>_observableThrow(response_);
    }));
  }

  protected processLobbiesPost(response: HttpResponseBase): Observable<LobbyDataWrapper> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result201: any = null;
        let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = LobbyDataWrapper.fromJS(resultData201);
        return _observableOf(result201);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<LobbyDataWrapper>(<any>null);
  }

  lobbiesPut(wrapper: LobbyDataWrapper, lobbyId: string): Observable<LobbyDataWrapper> {
    let url_ = this.baseUrl + "/api/lobbies/{lobbyId}";
    if (lobbyId === undefined || lobbyId === null)
      throw new Error("The parameter 'lobbyId' must be defined.");
    url_ = url_.replace("{lobbyId}", encodeURIComponent("" + lobbyId));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(wrapper);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processLobbiesPut(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processLobbiesPut(<any>response_);
        } catch (e) {
          return <Observable<LobbyDataWrapper>><any>_observableThrow(e);
        }
      } else
        return <Observable<LobbyDataWrapper>><any>_observableThrow(response_);
    }));
  }

  protected processLobbiesPut(response: HttpResponseBase): Observable<LobbyDataWrapper> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = LobbyDataWrapper.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<LobbyDataWrapper>(<any>null);
  }

  leave(): Observable<void> {
    let url_ = this.baseUrl + "/api/lobbies/current/leave";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processLeave(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processLeave(<any>response_);
        } catch (e) {
          return <Observable<void>><any>_observableThrow(e);
        }
      } else
        return <Observable<void>><any>_observableThrow(response_);
    }));
  }

  protected processLeave(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(<any>null);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<void>(<any>null);
  }

  invitePost(lobbyId: string, playerName: string | null | undefined): Observable<LobbyDataWrapper> {
    let url_ = this.baseUrl + "/api/lobbies/{lobbyId}/invite?";
    if (lobbyId === undefined || lobbyId === null)
      throw new Error("The parameter 'lobbyId' must be defined.");
    url_ = url_.replace("{lobbyId}", encodeURIComponent("" + lobbyId));
    if (playerName !== undefined)
      url_ += "playerName=" + encodeURIComponent("" + playerName) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processInvitePost(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processInvitePost(<any>response_);
        } catch (e) {
          return <Observable<LobbyDataWrapper>><any>_observableThrow(e);
        }
      } else
        return <Observable<LobbyDataWrapper>><any>_observableThrow(response_);
    }));
  }

  protected processInvitePost(response: HttpResponseBase): Observable<LobbyDataWrapper> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = LobbyDataWrapper.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<LobbyDataWrapper>(<any>null);
  }

  inviteDelete(lobbyId: string, playerName: string | null | undefined): Observable<LobbyDataWrapper> {
    let url_ = this.baseUrl + "/api/lobbies/{lobbyId}/invite?";
    if (lobbyId === undefined || lobbyId === null)
      throw new Error("The parameter 'lobbyId' must be defined.");
    url_ = url_.replace("{lobbyId}", encodeURIComponent("" + lobbyId));
    if (playerName !== undefined)
      url_ += "playerName=" + encodeURIComponent("" + playerName) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processInviteDelete(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processInviteDelete(<any>response_);
        } catch (e) {
          return <Observable<LobbyDataWrapper>><any>_observableThrow(e);
        }
      } else
        return <Observable<LobbyDataWrapper>><any>_observableThrow(response_);
    }));
  }

  protected processInviteDelete(response: HttpResponseBase): Observable<LobbyDataWrapper> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = LobbyDataWrapper.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<LobbyDataWrapper>(<any>null);
  }

  join(lobbyId: string): Observable<LobbyDataWrapper> {
    let url_ = this.baseUrl + "/api/lobbies/{lobbyId}/join";
    if (lobbyId === undefined || lobbyId === null)
      throw new Error("The parameter 'lobbyId' must be defined.");
    url_ = url_.replace("{lobbyId}", encodeURIComponent("" + lobbyId));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processJoin(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processJoin(<any>response_);
        } catch (e) {
          return <Observable<LobbyDataWrapper>><any>_observableThrow(e);
        }
      } else
        return <Observable<LobbyDataWrapper>><any>_observableThrow(response_);
    }));
  }

  protected processJoin(response: HttpResponseBase): Observable<LobbyDataWrapper> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = LobbyDataWrapper.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<LobbyDataWrapper>(<any>null);
  }

  kick(lobbyId: string, guestName: string | null): Observable<LobbyDataWrapper> {
    let url_ = this.baseUrl + "/api/lobbies/{lobbyId}/kick/{guestName}";
    if (lobbyId === undefined || lobbyId === null)
      throw new Error("The parameter 'lobbyId' must be defined.");
    url_ = url_.replace("{lobbyId}", encodeURIComponent("" + lobbyId));
    if (guestName === undefined || guestName === null)
      throw new Error("The parameter 'guestName' must be defined.");
    url_ = url_.replace("{guestName}", encodeURIComponent("" + guestName));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processKick(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processKick(<any>response_);
        } catch (e) {
          return <Observable<LobbyDataWrapper>><any>_observableThrow(e);
        }
      } else
        return <Observable<LobbyDataWrapper>><any>_observableThrow(response_);
    }));
  }

  protected processKick(response: HttpResponseBase): Observable<LobbyDataWrapper> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = LobbyDataWrapper.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<LobbyDataWrapper>(<any>null);
  }
}

@Injectable({
  providedIn: 'root'
})
export class MatchesClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
  }

  matchesGet(): Observable<MatchStatus[]> {
    let url_ = this.baseUrl + "/api/matches";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processMatchesGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processMatchesGet(<any>response_);
        } catch (e) {
          return <Observable<MatchStatus[]>><any>_observableThrow(e);
        }
      } else
        return <Observable<MatchStatus[]>><any>_observableThrow(response_);
    }));
  }

  protected processMatchesGet(response: HttpResponseBase): Observable<MatchStatus[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(MatchStatus.fromJS(item));
        }
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<MatchStatus[]>(<any>null);
  }

  matchesPost(lobbyId: string | undefined): Observable<MatchStatus> {
    let url_ = this.baseUrl + "/api/matches?";
    if (lobbyId === null)
      throw new Error("The parameter 'lobbyId' cannot be null.");
    else if (lobbyId !== undefined)
      url_ += "lobbyId=" + encodeURIComponent("" + lobbyId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processMatchesPost(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processMatchesPost(<any>response_);
        } catch (e) {
          return <Observable<MatchStatus>><any>_observableThrow(e);
        }
      } else
        return <Observable<MatchStatus>><any>_observableThrow(response_);
    }));
  }

  protected processMatchesPost(response: HttpResponseBase): Observable<MatchStatus> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result201: any = null;
        let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = MatchStatus.fromJS(resultData201);
        return _observableOf(result201);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<MatchStatus>(<any>null);
  }

  moves(moveDataWrapper: MoveDataWrapper): Observable<MatchStatus> {
    let url_ = this.baseUrl + "/api/matches/moves";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(moveDataWrapper);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processMoves(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processMoves(<any>response_);
        } catch (e) {
          return <Observable<MatchStatus>><any>_observableThrow(e);
        }
      } else
        return <Observable<MatchStatus>><any>_observableThrow(response_);
    }));
  }

  protected processMoves(response: HttpResponseBase): Observable<MatchStatus> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = MatchStatus.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<MatchStatus>(<any>null);
  }
}

@Injectable({
  providedIn: 'root'
})
export class NotificationsClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
  }

  notificationsGet(): Observable<NotificationDto[]> {
    let url_ = this.baseUrl + "/api/notifications";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processNotificationsGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processNotificationsGet(<any>response_);
        } catch (e) {
          return <Observable<NotificationDto[]>><any>_observableThrow(e);
        }
      } else
        return <Observable<NotificationDto[]>><any>_observableThrow(response_);
    }));
  }

  protected processNotificationsGet(response: HttpResponseBase): Observable<NotificationDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(NotificationDto.fromJS(item));
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<NotificationDto[]>(<any>null);
  }

  notificationsDelete(id: string): Observable<void> {
    let url_ = this.baseUrl + "/api/notifications/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processNotificationsDelete(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processNotificationsDelete(<any>response_);
        } catch (e) {
          return <Observable<void>><any>_observableThrow(e);
        }
      } else
        return <Observable<void>><any>_observableThrow(response_);
    }));
  }

  protected processNotificationsDelete(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(<any>null);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<void>(<any>null);
  }
}

@Injectable({
  providedIn: 'root'
})
export class SoloQueueClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
  }

  join(): Observable<void> {
    let url_ = this.baseUrl + "/api/solo-queue/join";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processJoin(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processJoin(<any>response_);
        } catch (e) {
          return <Observable<void>><any>_observableThrow(e);
        }
      } else
        return <Observable<void>><any>_observableThrow(response_);
    }));
  }

  protected processJoin(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(<any>null);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<void>(<any>null);
  }

  leave(): Observable<void> {
    let url_ = this.baseUrl + "/api/solo-queue/leave";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processLeave(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processLeave(<any>response_);
        } catch (e) {
          return <Observable<void>><any>_observableThrow(e);
        }
      } else
        return <Observable<void>><any>_observableThrow(response_);
    }));
  }

  protected processLeave(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(<any>null);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<void>(<any>null);
  }
}

@Injectable({
  providedIn: 'root'
})
export class StatisticsClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
  }

  statistics(): Observable<StatisticsDto> {
    let url_ = this.baseUrl + "/api/statistics";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processStatistics(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processStatistics(<any>response_);
        } catch (e) {
          return <Observable<StatisticsDto>><any>_observableThrow(e);
        }
      } else
        return <Observable<StatisticsDto>><any>_observableThrow(response_);
    }));
  }

  protected processStatistics(response: HttpResponseBase): Observable<StatisticsDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StatisticsDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<StatisticsDto>(<any>null);
  }
}

@Injectable({
  providedIn: 'root'
})
export class DirectMessagesClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
  }

  messagesGet(friendshipId: string, oldestId: string | null | undefined, count: number | undefined): Observable<RollListDtoOfMessage> {
    let url_ = this.baseUrl + "/api/messages/{friendshipId}?";
    if (friendshipId === undefined || friendshipId === null)
      throw new Error("The parameter 'friendshipId' must be defined.");
    url_ = url_.replace("{friendshipId}", encodeURIComponent("" + friendshipId));
    if (oldestId !== undefined)
      url_ += "oldestId=" + encodeURIComponent("" + oldestId) + "&";
    if (count === null)
      throw new Error("The parameter 'count' cannot be null.");
    else if (count !== undefined)
      url_ += "count=" + encodeURIComponent("" + count) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processMessagesGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processMessagesGet(<any>response_);
        } catch (e) {
          return <Observable<RollListDtoOfMessage>><any>_observableThrow(e);
        }
      } else
        return <Observable<RollListDtoOfMessage>><any>_observableThrow(response_);
    }));
  }

  protected processMessagesGet(response: HttpResponseBase): Observable<RollListDtoOfMessage> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = RollListDtoOfMessage.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status === 403) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result403: any = null;
        let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result403 = ProblemDetails.fromJS(resultData403);
        return throwException("A server side error occurred.", status, _responseText, _headers, result403);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<RollListDtoOfMessage>(<any>null);
  }

  messagesPost(friendshipId: string, message: string): Observable<Message> {
    let url_ = this.baseUrl + "/api/messages/{friendshipId}";
    if (friendshipId === undefined || friendshipId === null)
      throw new Error("The parameter 'friendshipId' must be defined.");
    url_ = url_.replace("{friendshipId}", encodeURIComponent("" + friendshipId));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(message);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processMessagesPost(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processMessagesPost(<any>response_);
        } catch (e) {
          return <Observable<Message>><any>_observableThrow(e);
        }
      } else
        return <Observable<Message>><any>_observableThrow(response_);
    }));
  }

  protected processMessagesPost(response: HttpResponseBase): Observable<Message> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Message.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status === 403) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result403: any = null;
        let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result403 = ProblemDetails.fromJS(resultData403);
        return throwException("A server side error occurred.", status, _responseText, _headers, result403);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<Message>(<any>null);
  }
}

@Injectable({
  providedIn: 'root'
})
export class LobbyMessagesClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
  }

  lobbyGet(lobbyId: string, oldestId: string | null | undefined, count: number | undefined): Observable<RollListDtoOfMessage> {
    let url_ = this.baseUrl + "/api/messages/lobby/{lobbyId}?";
    if (lobbyId === undefined || lobbyId === null)
      throw new Error("The parameter 'lobbyId' must be defined.");
    url_ = url_.replace("{lobbyId}", encodeURIComponent("" + lobbyId));
    if (oldestId !== undefined)
      url_ += "oldestId=" + encodeURIComponent("" + oldestId) + "&";
    if (count === null)
      throw new Error("The parameter 'count' cannot be null.");
    else if (count !== undefined)
      url_ += "count=" + encodeURIComponent("" + count) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processLobbyGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processLobbyGet(<any>response_);
        } catch (e) {
          return <Observable<RollListDtoOfMessage>><any>_observableThrow(e);
        }
      } else
        return <Observable<RollListDtoOfMessage>><any>_observableThrow(response_);
    }));
  }

  protected processLobbyGet(response: HttpResponseBase): Observable<RollListDtoOfMessage> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = RollListDtoOfMessage.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<RollListDtoOfMessage>(<any>null);
  }

  lobbyPost(lobbyId: string, message: string): Observable<Message> {
    let url_ = this.baseUrl + "/api/messages/lobby/{lobbyId}";
    if (lobbyId === undefined || lobbyId === null)
      throw new Error("The parameter 'lobbyId' must be defined.");
    url_ = url_.replace("{lobbyId}", encodeURIComponent("" + lobbyId));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(message);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processLobbyPost(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processLobbyPost(<any>response_);
        } catch (e) {
          return <Observable<Message>><any>_observableThrow(e);
        }
      } else
        return <Observable<Message>><any>_observableThrow(response_);
    }));
  }

  protected processLobbyPost(response: HttpResponseBase): Observable<Message> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Message.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<Message>(<any>null);
  }
}

@Injectable({
  providedIn: 'root'
})
export class MatchMessagesClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
  }

  matchGet(matchId: string, oldestId: string | null | undefined, count: number | undefined): Observable<RollListDtoOfMessage> {
    let url_ = this.baseUrl + "/api/messages/match/{matchId}?";
    if (matchId === undefined || matchId === null)
      throw new Error("The parameter 'matchId' must be defined.");
    url_ = url_.replace("{matchId}", encodeURIComponent("" + matchId));
    if (oldestId !== undefined)
      url_ += "oldestId=" + encodeURIComponent("" + oldestId) + "&";
    if (count === null)
      throw new Error("The parameter 'count' cannot be null.");
    else if (count !== undefined)
      url_ += "count=" + encodeURIComponent("" + count) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processMatchGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processMatchGet(<any>response_);
        } catch (e) {
          return <Observable<RollListDtoOfMessage>><any>_observableThrow(e);
        }
      } else
        return <Observable<RollListDtoOfMessage>><any>_observableThrow(response_);
    }));
  }

  protected processMatchGet(response: HttpResponseBase): Observable<RollListDtoOfMessage> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = RollListDtoOfMessage.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<RollListDtoOfMessage>(<any>null);
  }

  matchPost(matchId: string, message: string): Observable<Message> {
    let url_ = this.baseUrl + "/api/messages/match/{matchId}";
    if (matchId === undefined || matchId === null)
      throw new Error("The parameter 'matchId' must be defined.");
    url_ = url_.replace("{matchId}", encodeURIComponent("" + matchId));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(message);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processMatchPost(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processMatchPost(<any>response_);
        } catch (e) {
          return <Observable<Message>><any>_observableThrow(e);
        }
      } else
        return <Observable<Message>><any>_observableThrow(response_);
    }));
  }

  protected processMatchPost(response: HttpResponseBase): Observable<Message> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Message.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<Message>(<any>null);
  }
}

@Injectable({
  providedIn: 'root'
})
export class FriendRequestsClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
  }

  received(): Observable<FriendRequestDto[]> {
    let url_ = this.baseUrl + "/api/friends/friend-requests/received";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processReceived(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processReceived(<any>response_);
        } catch (e) {
          return <Observable<FriendRequestDto[]>><any>_observableThrow(e);
        }
      } else
        return <Observable<FriendRequestDto[]>><any>_observableThrow(response_);
    }));
  }

  protected processReceived(response: HttpResponseBase): Observable<FriendRequestDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(FriendRequestDto.fromJS(item));
        }
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<FriendRequestDto[]>(<any>null);
  }

  sent(): Observable<FriendRequestDto[]> {
    let url_ = this.baseUrl + "/api/friends/friend-requests/sent";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processSent(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processSent(<any>response_);
        } catch (e) {
          return <Observable<FriendRequestDto[]>><any>_observableThrow(e);
        }
      } else
        return <Observable<FriendRequestDto[]>><any>_observableThrow(response_);
    }));
  }

  protected processSent(response: HttpResponseBase): Observable<FriendRequestDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(FriendRequestDto.fromJS(item));
        }
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<FriendRequestDto[]>(<any>null);
  }

  friendRequests(userId: string): Observable<FriendRequestDto> {
    let url_ = this.baseUrl + "/api/friends/friend-requests/{userId}";
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processFriendRequests(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processFriendRequests(<any>response_);
        } catch (e) {
          return <Observable<FriendRequestDto>><any>_observableThrow(e);
        }
      } else
        return <Observable<FriendRequestDto>><any>_observableThrow(response_);
    }));
  }

  protected processFriendRequests(response: HttpResponseBase): Observable<FriendRequestDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result201: any = null;
        let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = FriendRequestDto.fromJS(resultData201);
        return _observableOf(result201);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<FriendRequestDto>(<any>null);
  }

  cancel(requestId: string): Observable<void> {
    let url_ = this.baseUrl + "/api/friends/friend-requests/{requestId}/cancel";
    if (requestId === undefined || requestId === null)
      throw new Error("The parameter 'requestId' must be defined.");
    url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processCancel(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCancel(<any>response_);
        } catch (e) {
          return <Observable<void>><any>_observableThrow(e);
        }
      } else
        return <Observable<void>><any>_observableThrow(response_);
    }));
  }

  protected processCancel(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(<any>null);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<void>(<any>null);
  }

  reject(requestId: string): Observable<void> {
    let url_ = this.baseUrl + "/api/friends/friend-requests/{requestId}/reject";
    if (requestId === undefined || requestId === null)
      throw new Error("The parameter 'requestId' must be defined.");
    url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processReject(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processReject(<any>response_);
        } catch (e) {
          return <Observable<void>><any>_observableThrow(e);
        }
      } else
        return <Observable<void>><any>_observableThrow(response_);
    }));
  }

  protected processReject(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(<any>null);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<void>(<any>null);
  }
}

@Injectable({
  providedIn: 'root'
})
export class FriendshipsClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
  }

  friendshipsGet(): Observable<FriendDto[]> {
    let url_ = this.baseUrl + "/api/friends/friendships";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processFriendshipsGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processFriendshipsGet(<any>response_);
        } catch (e) {
          return <Observable<FriendDto[]>><any>_observableThrow(e);
        }
      } else
        return <Observable<FriendDto[]>><any>_observableThrow(response_);
    }));
  }

  protected processFriendshipsGet(response: HttpResponseBase): Observable<FriendDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(FriendDto.fromJS(item));
        }
        return _observableOf(result200);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<FriendDto[]>(<any>null);
  }

  friendshipsDelete(friendshipId: string): Observable<void> {
    let url_ = this.baseUrl + "/api/friends/friendships/{friendshipId}";
    if (friendshipId === undefined || friendshipId === null)
      throw new Error("The parameter 'friendshipId' must be defined.");
    url_ = url_.replace("{friendshipId}", encodeURIComponent("" + friendshipId));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processFriendshipsDelete(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processFriendshipsDelete(<any>response_);
        } catch (e) {
          return <Observable<void>><any>_observableThrow(e);
        }
      } else
        return <Observable<void>><any>_observableThrow(response_);
    }));
  }

  protected processFriendshipsDelete(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(<any>null);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<void>(<any>null);
  }

  friendshipsPost(requestId: string): Observable<FriendDto> {
    let url_ = this.baseUrl + "/api/friends/friendships/{requestId}";
    if (requestId === undefined || requestId === null)
      throw new Error("The parameter 'requestId' must be defined.");
    url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processFriendshipsPost(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processFriendshipsPost(<any>response_);
        } catch (e) {
          return <Observable<FriendDto>><any>_observableThrow(e);
        }
      } else
        return <Observable<FriendDto>><any>_observableThrow(response_);
    }));
  }

  protected processFriendshipsPost(response: HttpResponseBase): Observable<FriendDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result201: any = null;
        let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = FriendDto.fromJS(resultData201);
        return _observableOf(result201);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("A server side error occurred.", status, _responseText, _headers, result401);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<FriendDto>(<any>null);
  }
}

export class ProblemDetails implements IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  extensions?: { [key: string]: any; } | undefined;

  constructor(data?: IProblemDetails) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.type = _data["type"];
      this.title = _data["title"];
      this.status = _data["status"];
      this.detail = _data["detail"];
      this.instance = _data["instance"];
      if (_data["extensions"]) {
        this.extensions = {} as any;
        for (let key in _data["extensions"]) {
          if (_data["extensions"].hasOwnProperty(key))
            this.extensions![key] = _data["extensions"][key];
        }
      }
    }
  }

  static fromJS(data: any): ProblemDetails {
    data = typeof data === 'object' ? data : {};
    let result = new ProblemDetails();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["type"] = this.type;
    data["title"] = this.title;
    data["status"] = this.status;
    data["detail"] = this.detail;
    data["instance"] = this.instance;
    if (this.extensions) {
      data["extensions"] = {};
      for (let key in this.extensions) {
        if (this.extensions.hasOwnProperty(key))
          data["extensions"][key] = this.extensions[key];
      }
    }
    return data;
  }
}

export interface IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  extensions?: { [key: string]: any; } | undefined;
}

export class RegisterModel implements IRegisterModel {
  username?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;

  constructor(data?: IRegisterModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.username = _data["username"];
      this.email = _data["email"];
      this.password = _data["password"];
    }
  }

  static fromJS(data: any): RegisterModel {
    data = typeof data === 'object' ? data : {};
    let result = new RegisterModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["username"] = this.username;
    data["email"] = this.email;
    data["password"] = this.password;
    return data;
  }
}

export interface IRegisterModel {
  username?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
}

export class ChangePasswordModel implements IChangePasswordModel {
  oldPassword?: string | undefined;
  password?: string | undefined;

  constructor(data?: IChangePasswordModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.oldPassword = _data["oldPassword"];
      this.password = _data["password"];
    }
  }

  static fromJS(data: any): ChangePasswordModel {
    data = typeof data === 'object' ? data : {};
    let result = new ChangePasswordModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["oldPassword"] = this.oldPassword;
    data["password"] = this.password;
    return data;
  }
}

export interface IChangePasswordModel {
  oldPassword?: string | undefined;
  password?: string | undefined;
}

export class PasswordResetModel implements IPasswordResetModel {
  username?: string | undefined;
  password?: string | undefined;
  token?: string | undefined;

  constructor(data?: IPasswordResetModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.username = _data["username"];
      this.password = _data["password"];
      this.token = _data["token"];
    }
  }

  static fromJS(data: any): PasswordResetModel {
    data = typeof data === 'object' ? data : {};
    let result = new PasswordResetModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["username"] = this.username;
    data["password"] = this.password;
    data["token"] = this.token;
    return data;
  }
}

export interface IPasswordResetModel {
  username?: string | undefined;
  password?: string | undefined;
  token?: string | undefined;
}

export class UserInfo implements IUserInfo {
  id!: string;
  username?: string | undefined;
  email?: string | undefined;

  constructor(data?: IUserInfo) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.username = _data["username"];
      this.email = _data["email"];
    }
  }

  static fromJS(data: any): UserInfo {
    data = typeof data === 'object' ? data : {};
    let result = new UserInfo();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["username"] = this.username;
    data["email"] = this.email;
    return data;
  }
}

export interface IUserInfo {
  id: string;
  username?: string | undefined;
  email?: string | undefined;
}

export class UserDto implements IUserDto {
  id!: string;
  username?: string | undefined;

  constructor(data?: IUserDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.username = _data["username"];
    }
  }

  static fromJS(data: any): UserDto {
    data = typeof data === 'object' ? data : {};
    let result = new UserDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["username"] = this.username;
    return data;
  }
}

export interface IUserDto {
  id: string;
  username?: string | undefined;
}

export class AchivementDto implements IAchivementDto {
  id!: string;
  title?: string | undefined;
  description?: string | undefined;
  isStarred!: boolean;
  unlockedAt!: Date;

  constructor(data?: IAchivementDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.title = _data["title"];
      this.description = _data["description"];
      this.isStarred = _data["isStarred"];
      this.unlockedAt = _data["unlockedAt"] ? new Date(_data["unlockedAt"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): AchivementDto {
    data = typeof data === 'object' ? data : {};
    let result = new AchivementDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["title"] = this.title;
    data["description"] = this.description;
    data["isStarred"] = this.isStarred;
    data["unlockedAt"] = this.unlockedAt ? this.unlockedAt.toISOString() : <any>undefined;
    return data;
  }
}

export interface IAchivementDto {
  id: string;
  title?: string | undefined;
  description?: string | undefined;
  isStarred: boolean;
  unlockedAt: Date;
}

export class WrapperOfLobbyData implements IWrapperOfLobbyData {
  gameType!: GameType;
  content?: LobbyData | undefined;

  constructor(data?: IWrapperOfLobbyData) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.gameType = _data["gameType"];
      this.content = _data["content"] ? LobbyData.fromJS(_data["content"]) : <any>undefined;
    }
  }

  static fromJS(data: any): WrapperOfLobbyData {
    data = typeof data === 'object' ? data : {};
    let result = new WrapperOfLobbyData();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["gameType"] = this.gameType;
    data["content"] = this.content ? this.content.toJSON() : <any>undefined;
    return data;
  }
}

export interface IWrapperOfLobbyData {
  gameType: GameType;
  content?: LobbyData | undefined;
}

export class LobbyDataWrapper extends WrapperOfLobbyData implements ILobbyDataWrapper {

  constructor(data?: ILobbyDataWrapper) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
  }

  static fromJS(data: any): LobbyDataWrapper {
    data = typeof data === 'object' ? data : {};
    let result = new LobbyDataWrapper();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    super.toJSON(data);
    return data;
  }
}

export interface ILobbyDataWrapper extends IWrapperOfLobbyData {
}

export enum GameType {
  Chess = 0,
  Connect4 = 1,
}

export abstract class LobbyData implements ILobbyData {
  id!: string;
  name?: string | undefined;
  host?: string | undefined;
  guests?: string[] | undefined;
  access!: LobbyAccess;
  invitedPlayers?: string[] | undefined;
  empty!: boolean;
  created!: Date;
  lastModified!: Date;

  constructor(data?: ILobbyData) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.host = _data["host"];
      if (Array.isArray(_data["guests"])) {
        this.guests = [] as any;
        for (let item of _data["guests"])
          this.guests!.push(item);
      }
      this.access = _data["access"];
      if (Array.isArray(_data["invitedPlayers"])) {
        this.invitedPlayers = [] as any;
        for (let item of _data["invitedPlayers"])
          this.invitedPlayers!.push(item);
      }
      this.empty = _data["empty"];
      this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
      this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): LobbyData {
    data = typeof data === 'object' ? data : {};
    throw new Error("The abstract class 'LobbyData' cannot be instantiated.");
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["host"] = this.host;
    if (Array.isArray(this.guests)) {
      data["guests"] = [];
      for (let item of this.guests)
        data["guests"].push(item);
    }
    data["access"] = this.access;
    if (Array.isArray(this.invitedPlayers)) {
      data["invitedPlayers"] = [];
      for (let item of this.invitedPlayers)
        data["invitedPlayers"].push(item);
    }
    data["empty"] = this.empty;
    data["created"] = this.created ? this.created.toISOString() : <any>undefined;
    data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
    return data;
  }
}

export interface ILobbyData {
  id: string;
  name?: string | undefined;
  host?: string | undefined;
  guests?: string[] | undefined;
  access: LobbyAccess;
  invitedPlayers?: string[] | undefined;
  empty: boolean;
  created: Date;
  lastModified: Date;
}

export enum LobbyAccess {
  Public = 0,
  Private = 1,
  FriendsOnly = 2,
}

export class CreateLobbyDto implements ICreateLobbyDto {
  gameType!: GameType;
  lobbyAccess!: LobbyAccess;
  name?: string | undefined;

  constructor(data?: ICreateLobbyDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.gameType = _data["gameType"];
      this.lobbyAccess = _data["lobbyAccess"];
      this.name = _data["name"];
    }
  }

  static fromJS(data: any): CreateLobbyDto {
    data = typeof data === 'object' ? data : {};
    let result = new CreateLobbyDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["gameType"] = this.gameType;
    data["lobbyAccess"] = this.lobbyAccess;
    data["name"] = this.name;
    return data;
  }
}

export interface ICreateLobbyDto {
  gameType: GameType;
  lobbyAccess: LobbyAccess;
  name?: string | undefined;
}

export class MatchStatus implements IMatchStatus {
  id!: string;
  currentPlayerIndex!: number;
  playerIndex!: number;
  players?: Player[] | undefined;
  currentBoard?: MoveResultWrapper | undefined;
  state!: GameState;
  winner?: string | undefined;

  constructor(data?: IMatchStatus) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.currentPlayerIndex = _data["currentPlayerIndex"];
      this.playerIndex = _data["playerIndex"];
      if (Array.isArray(_data["players"])) {
        this.players = [] as any;
        for (let item of _data["players"])
          this.players!.push(Player.fromJS(item));
      }
      this.currentBoard = _data["currentBoard"] ? MoveResultWrapper.fromJS(_data["currentBoard"]) : <any>undefined;
      this.state = _data["state"];
      this.winner = _data["winner"];
    }
  }

  static fromJS(data: any): MatchStatus {
    data = typeof data === 'object' ? data : {};
    let result = new MatchStatus();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["currentPlayerIndex"] = this.currentPlayerIndex;
    data["playerIndex"] = this.playerIndex;
    if (Array.isArray(this.players)) {
      data["players"] = [];
      for (let item of this.players)
        data["players"].push(item.toJSON());
    }
    data["currentBoard"] = this.currentBoard ? this.currentBoard.toJSON() : <any>undefined;
    data["state"] = this.state;
    data["winner"] = this.winner;
    return data;
  }
}

export interface IMatchStatus {
  id: string;
  currentPlayerIndex: number;
  playerIndex: number;
  players?: Player[] | undefined;
  currentBoard?: MoveResultWrapper | undefined;
  state: GameState;
  winner?: string | undefined;
}

export class Player implements IPlayer {
  username?: string | undefined;
  playerIndex!: number;

  constructor(data?: IPlayer) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.username = _data["username"];
      this.playerIndex = _data["playerIndex"];
    }
  }

  static fromJS(data: any): Player {
    data = typeof data === 'object' ? data : {};
    let result = new Player();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["username"] = this.username;
    data["playerIndex"] = this.playerIndex;
    return data;
  }
}

export interface IPlayer {
  username?: string | undefined;
  playerIndex: number;
}

export class WrapperOfIMoveResult implements IWrapperOfIMoveResult {
  gameType!: GameType;
  content?: IMoveResult | undefined;

  constructor(data?: IWrapperOfIMoveResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.gameType = _data["gameType"];
      this.content = _data["content"] ? IMoveResult.fromJS(_data["content"]) : <any>undefined;
    }
  }

  static fromJS(data: any): WrapperOfIMoveResult {
    data = typeof data === 'object' ? data : {};
    let result = new WrapperOfIMoveResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["gameType"] = this.gameType;
    data["content"] = this.content ? this.content.toJSON() : <any>undefined;
    return data;
  }
}

export interface IWrapperOfIMoveResult {
  gameType: GameType;
  content?: IMoveResult | undefined;
}

export class MoveResultWrapper extends WrapperOfIMoveResult implements IMoveResultWrapper {

  constructor(data?: IMoveResultWrapper) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
  }

  static fromJS(data: any): MoveResultWrapper {
    data = typeof data === 'object' ? data : {};
    let result = new MoveResultWrapper();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    super.toJSON(data);
    return data;
  }
}

export interface IMoveResultWrapper extends IWrapperOfIMoveResult {
}

export abstract class IMoveResult implements IIMoveResult {

  constructor(data?: IIMoveResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
  }

  static fromJS(data: any): IMoveResult {
    data = typeof data === 'object' ? data : {};
    throw new Error("The abstract class 'IMoveResult' cannot be instantiated.");
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    return data;
  }
}

export interface IIMoveResult {
}

export enum GameState {
  YourTurn = 0,
  EnemyTurn = 1,
  Won = 2,
  Lost = 3,
  Draw = 4,
}

export class WrapperOfMoveData implements IWrapperOfMoveData {
  gameType!: GameType;
  content?: MoveData | undefined;

  constructor(data?: IWrapperOfMoveData) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.gameType = _data["gameType"];
      this.content = _data["content"] ? MoveData.fromJS(_data["content"]) : <any>undefined;
    }
  }

  static fromJS(data: any): WrapperOfMoveData {
    data = typeof data === 'object' ? data : {};
    let result = new WrapperOfMoveData();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["gameType"] = this.gameType;
    data["content"] = this.content ? this.content.toJSON() : <any>undefined;
    return data;
  }
}

export interface IWrapperOfMoveData {
  gameType: GameType;
  content?: MoveData | undefined;
}

export class MoveDataWrapper extends WrapperOfMoveData implements IMoveDataWrapper {

  constructor(data?: IMoveDataWrapper) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
  }

  static fromJS(data: any): MoveDataWrapper {
    data = typeof data === 'object' ? data : {};
    let result = new MoveDataWrapper();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    super.toJSON(data);
    return data;
  }
}

export interface IMoveDataWrapper extends IWrapperOfMoveData {
}

export abstract class MoveData implements IMoveData {
  matchId!: string;

  constructor(data?: IMoveData) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.matchId = _data["matchId"];
    }
  }

  static fromJS(data: any): MoveData {
    data = typeof data === 'object' ? data : {};
    throw new Error("The abstract class 'MoveData' cannot be instantiated.");
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["matchId"] = this.matchId;
    return data;
  }
}

export interface IMoveData {
  matchId: string;
}

export class NotificationDto implements INotificationDto {
  id!: string;
  type!: NotificationType;
  senderUserName?: string | undefined;
  data!: string;

  constructor(data?: INotificationDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.type = _data["type"];
      this.senderUserName = _data["senderUserName"];
      this.data = _data["data"];
    }
  }

  static fromJS(data: any): NotificationDto {
    data = typeof data === 'object' ? data : {};
    let result = new NotificationDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["type"] = this.type;
    data["senderUserName"] = this.senderUserName;
    data["data"] = this.data;
    return data;
  }
}

export interface INotificationDto {
  id: string;
  type: NotificationType;
  senderUserName?: string | undefined;
  data: string;
}

export enum NotificationType {
  InviteReceived = 0,
  FriendRequestReceived = 1,
  Poked = 2,
  FriendRequestAccepted = 3,
  AchivementUnlocked = 4,
}

export class StatisticsDto implements IStatisticsDto {
  playedGames!: number;
  wonGames!: number;
  favouriteGame!: GameType;
  playedGamesOfFavourite!: number;
  wonGamesOfFavourite!: number;
  mostPlayedWithName?: string | undefined;

  constructor(data?: IStatisticsDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.playedGames = _data["playedGames"];
      this.wonGames = _data["wonGames"];
      this.favouriteGame = _data["favouriteGame"];
      this.playedGamesOfFavourite = _data["playedGamesOfFavourite"];
      this.wonGamesOfFavourite = _data["wonGamesOfFavourite"];
      this.mostPlayedWithName = _data["mostPlayedWithName"];
    }
  }

  static fromJS(data: any): StatisticsDto {
    data = typeof data === 'object' ? data : {};
    let result = new StatisticsDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["playedGames"] = this.playedGames;
    data["wonGames"] = this.wonGames;
    data["favouriteGame"] = this.favouriteGame;
    data["playedGamesOfFavourite"] = this.playedGamesOfFavourite;
    data["wonGamesOfFavourite"] = this.wonGamesOfFavourite;
    data["mostPlayedWithName"] = this.mostPlayedWithName;
    return data;
  }
}

export interface IStatisticsDto {
  playedGames: number;
  wonGames: number;
  favouriteGame: GameType;
  playedGamesOfFavourite: number;
  wonGamesOfFavourite: number;
  mostPlayedWithName?: string | undefined;
}

export class RollListDtoOfMessage implements IRollListDtoOfMessage {
  hasMoreLeft!: boolean;
  data?: Message[] | undefined;

  constructor(data?: IRollListDtoOfMessage) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.hasMoreLeft = _data["hasMoreLeft"];
      if (Array.isArray(_data["data"])) {
        this.data = [] as any;
        for (let item of _data["data"])
          this.data!.push(Message.fromJS(item));
      }
    }
  }

  static fromJS(data: any): RollListDtoOfMessage {
    data = typeof data === 'object' ? data : {};
    let result = new RollListDtoOfMessage();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["hasMoreLeft"] = this.hasMoreLeft;
    if (Array.isArray(this.data)) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    return data;
  }
}

export interface IRollListDtoOfMessage {
  hasMoreLeft: boolean;
  data?: Message[] | undefined;
}

export class Message implements IMessage {
  id!: string;
  sender?: string | undefined;
  text?: string | undefined;
  timestamp!: Date;

  constructor(data?: IMessage) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.sender = _data["sender"];
      this.text = _data["text"];
      this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): Message {
    data = typeof data === 'object' ? data : {};
    let result = new Message();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["sender"] = this.sender;
    data["text"] = this.text;
    data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
    return data;
  }
}

export interface IMessage {
  id: string;
  sender?: string | undefined;
  text?: string | undefined;
  timestamp: Date;
}

export class FriendRequestDto implements IFriendRequestDto {
  id!: string;
  senderName?: string | undefined;
  receiverName?: string | undefined;

  constructor(data?: IFriendRequestDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.senderName = _data["senderName"];
      this.receiverName = _data["receiverName"];
    }
  }

  static fromJS(data: any): FriendRequestDto {
    data = typeof data === 'object' ? data : {};
    let result = new FriendRequestDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["senderName"] = this.senderName;
    data["receiverName"] = this.receiverName;
    return data;
  }
}

export interface IFriendRequestDto {
  id: string;
  senderName?: string | undefined;
  receiverName?: string | undefined;
}

export class FriendDto implements IFriendDto {
  friendshipId!: string;
  isOnline!: boolean;
  username?: string | undefined;

  constructor(data?: IFriendDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.friendshipId = _data["friendshipId"];
      this.isOnline = _data["isOnline"];
      this.username = _data["username"];
    }
  }

  static fromJS(data: any): FriendDto {
    data = typeof data === 'object' ? data : {};
    let result = new FriendDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["friendshipId"] = this.friendshipId;
    data["isOnline"] = this.isOnline;
    data["username"] = this.username;
    return data;
  }
}

export interface IFriendDto {
  friendshipId: string;
  isOnline: boolean;
  username?: string | undefined;
}

export interface FileResponse {
  data: Blob;
  status: number;
  fileName?: string;
  headers?: { [name: string]: any };
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((<any>event.target).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
